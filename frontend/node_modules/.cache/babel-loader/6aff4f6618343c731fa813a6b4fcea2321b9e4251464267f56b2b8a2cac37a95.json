{"ast":null,"code":"var _jsxFileName = \"/Users/bagjimin/Desktop/aichatbot-project/frontend/src/components/PatientHistoryCard.jsx\";\n// src/components/PatientHistoryCard.jsx\nimport React from \"react\";\n\n/**\n * PatientHistoryCard\n * - 한 날짜의 간호기록(items)을 보기 좋은 카드로 표시\n *\n * props:\n *  - date: \"YYYY-MM-DD\"\n *  - items: Array<{ keyword?: string, detail?: string }>\n *  - keywordColor: Record<string, string>  // 키워드별 색\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PatientHistoryCard({\n  date,\n  items = [],\n  keywordColor = {}\n}) {\n  const grouped = groupByKeyword(items);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: S.card,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: S.header,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: S.date,\n        children: formatDate(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: S.count,\n        children: [items.length, \"\\uAC74\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), items.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: S.empty,\n      children: \"\\uD56D\\uBAA9 \\uC5C6\\uC74C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: S.body,\n      children: Object.entries(grouped).map(([kw, arr]) => {\n        const color = keywordColor[kw] || keywordColor[\"기타\"] || \"#64748b\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: S.group,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              ...S.kwPill,\n              color,\n              background: `${color}20`,\n              border: `1px solid ${color}40`\n            },\n            children: [kw, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: S.kwCount,\n              children: arr.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: S.list,\n            children: arr.map((it, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: S.item,\n              children: it.detail || \"-\"\n            }, `${kw}-${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this)]\n        }, kw, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_c = PatientHistoryCard;\nfunction groupByKeyword(items) {\n  const out = {};\n  for (const it of items) {\n    const k = it.keyword || \"기타\";\n    (out[k] ||= []).push(it);\n  }\n  return out;\n}\nfunction formatDate(d) {\n  if (!d) return \"-\";\n  try {\n    const dt = new Date(d);\n    const y = dt.getFullYear();\n    const m = `${dt.getMonth() + 1}`.padStart(2, \"0\");\n    const day = `${dt.getDate()}`.padStart(2, \"0\");\n    return `${y}.${m}.${day}`;\n  } catch {\n    return d;\n  }\n}\nconst S = {\n  card: {\n    background: \"#fff\",\n    border: \"1px solid #e5e7eb\",\n    borderRadius: 16,\n    padding: 14,\n    boxShadow: \"0 1px 2px rgba(0,0,0,0.03)\"\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    marginBottom: 8\n  },\n  date: {\n    fontSize: 16,\n    fontWeight: 800,\n    color: \"#0f172a\"\n  },\n  count: {\n    fontSize: 12,\n    color: \"#64748b\"\n  },\n  empty: {\n    padding: 12,\n    textAlign: \"center\",\n    color: \"#94a3b8\",\n    background: \"#f8fafc\",\n    borderRadius: 12,\n    border: \"1px dashed #e5e7eb\"\n  },\n  body: {\n    display: \"grid\",\n    gap: 10\n  },\n  group: {\n    border: \"1px solid #e5e7eb\",\n    borderRadius: 12,\n    padding: 10,\n    background: \"#fafafa\"\n  },\n  kwPill: {\n    display: \"inline-block\",\n    fontSize: 12,\n    fontWeight: 800,\n    padding: \"4px 8px\",\n    borderRadius: 999,\n    marginBottom: 8\n  },\n  kwCount: {\n    fontWeight: 700,\n    marginLeft: 6,\n    opacity: 0.8\n  },\n  list: {\n    margin: 0,\n    paddingLeft: 18\n  },\n  item: {\n    margin: \"4px 0\",\n    color: \"#0f172a\",\n    fontSize: 14\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"PatientHistoryCard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PatientHistoryCard","date","items","keywordColor","grouped","groupByKeyword","style","S","card","children","header","formatDate","fileName","_jsxFileName","lineNumber","columnNumber","count","length","empty","body","Object","entries","map","kw","arr","color","group","kwPill","background","border","kwCount","list","it","i","item","detail","_c","out","k","keyword","push","d","dt","Date","y","getFullYear","m","getMonth","padStart","day","getDate","borderRadius","padding","boxShadow","display","alignItems","justifyContent","marginBottom","fontSize","fontWeight","textAlign","gap","marginLeft","opacity","margin","paddingLeft","$RefreshReg$"],"sources":["/Users/bagjimin/Desktop/aichatbot-project/frontend/src/components/PatientHistoryCard.jsx"],"sourcesContent":["// src/components/PatientHistoryCard.jsx\nimport React from \"react\";\n\n/**\n * PatientHistoryCard\n * - 한 날짜의 간호기록(items)을 보기 좋은 카드로 표시\n *\n * props:\n *  - date: \"YYYY-MM-DD\"\n *  - items: Array<{ keyword?: string, detail?: string }>\n *  - keywordColor: Record<string, string>  // 키워드별 색\n */\nexport default function PatientHistoryCard({ date, items = [], keywordColor = {} }) {\n  const grouped = groupByKeyword(items);\n\n  return (\n    <div style={S.card}>\n      <div style={S.header}>\n        <div style={S.date}>{formatDate(date)}</div>\n        <div style={S.count}>{items.length}건</div>\n      </div>\n\n      {items.length === 0 ? (\n        <div style={S.empty}>항목 없음</div>\n      ) : (\n        <div style={S.body}>\n          {Object.entries(grouped).map(([kw, arr]) => {\n            const color = keywordColor[kw] || keywordColor[\"기타\"] || \"#64748b\";\n            return (\n              <div key={kw} style={S.group}>\n                <span\n                  style={{\n                    ...S.kwPill,\n                    color,\n                    background: `${color}20`,\n                    border: `1px solid ${color}40`,\n                  }}\n                >\n                  {kw} <span style={S.kwCount}>{arr.length}</span>\n                </span>\n                <ul style={S.list}>\n                  {arr.map((it, i) => (\n                    <li key={`${kw}-${i}`} style={S.item}>\n                      {it.detail || \"-\"}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction groupByKeyword(items) {\n  const out = {};\n  for (const it of items) {\n    const k = it.keyword || \"기타\";\n    (out[k] ||= []).push(it);\n  }\n  return out;\n}\n\nfunction formatDate(d) {\n  if (!d) return \"-\";\n  try {\n    const dt = new Date(d);\n    const y = dt.getFullYear();\n    const m = `${dt.getMonth() + 1}`.padStart(2, \"0\");\n    const day = `${dt.getDate()}`.padStart(2, \"0\");\n    return `${y}.${m}.${day}`;\n  } catch {\n    return d;\n  }\n}\n\nconst S = {\n  card: {\n    background: \"#fff\",\n    border: \"1px solid #e5e7eb\",\n    borderRadius: 16,\n    padding: 14,\n    boxShadow: \"0 1px 2px rgba(0,0,0,0.03)\",\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    marginBottom: 8,\n  },\n  date: { fontSize: 16, fontWeight: 800, color: \"#0f172a\" },\n  count: { fontSize: 12, color: \"#64748b\" },\n  empty: {\n    padding: 12,\n    textAlign: \"center\",\n    color: \"#94a3b8\",\n    background: \"#f8fafc\",\n    borderRadius: 12,\n    border: \"1px dashed #e5e7eb\",\n  },\n  body: { display: \"grid\", gap: 10 },\n  group: {\n    border: \"1px solid #e5e7eb\",\n    borderRadius: 12,\n    padding: 10,\n    background: \"#fafafa\",\n  },\n  kwPill: {\n    display: \"inline-block\",\n    fontSize: 12,\n    fontWeight: 800,\n    padding: \"4px 8px\",\n    borderRadius: 999,\n    marginBottom: 8,\n  },\n  kwCount: { fontWeight: 700, marginLeft: 6, opacity: 0.8 },\n  list: { margin: 0, paddingLeft: 18 },\n  item: { margin: \"4px 0\", color: \"#0f172a\", fontSize: 14 },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}