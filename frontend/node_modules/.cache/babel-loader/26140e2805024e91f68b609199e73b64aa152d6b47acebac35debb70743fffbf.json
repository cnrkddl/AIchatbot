{"ast":null,"code":"var _jsxFileName = \"/Users/bagjimin/Desktop/aichatbot-project/frontend/src/context/NotificationContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(null);\nconst STORAGE_KEY = \"app.notifications.v1\";\nexport function NotificationProvider({\n  children\n}) {\n  _s();\n  const [items, setItems] = useState(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      return saved ? JSON.parse(saved) : [];\n    } catch {\n      return [];\n    }\n  });\n  const [lastAdded, setLastAdded] = useState(null); // 새 알림 팝업용\n\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(items));\n  }, [items]);\n  const add = notif => {\n    var _notif$title, _notif$message, _notif$type, _notif$source, _notif$ts;\n    const n = {\n      id: crypto.randomUUID(),\n      title: (_notif$title = notif.title) !== null && _notif$title !== void 0 ? _notif$title : \"알림\",\n      message: (_notif$message = notif.message) !== null && _notif$message !== void 0 ? _notif$message : \"\",\n      type: (_notif$type = notif.type) !== null && _notif$type !== void 0 ? _notif$type : \"info\",\n      // info | warning | critical\n      source: (_notif$source = notif.source) !== null && _notif$source !== void 0 ? _notif$source : \"system\",\n      ts: (_notif$ts = notif.ts) !== null && _notif$ts !== void 0 ? _notif$ts : Date.now(),\n      read: false\n    };\n    setItems(prev => [n, ...prev]);\n    setLastAdded(n);\n  };\n  const markRead = id => {\n    setItems(prev => prev.map(n => n.id === id ? {\n      ...n,\n      read: true\n    } : n));\n  };\n  const markAllRead = () => {\n    setItems(prev => prev.map(n => ({\n      ...n,\n      read: true\n    })));\n  };\n  const remove = id => {\n    setItems(prev => prev.filter(n => n.id !== id));\n  };\n  const unreadCount = useMemo(() => items.filter(n => !n.read).length, [items]);\n  const value = {\n    items,\n    add,\n    markRead,\n    markAllRead,\n    remove,\n    unreadCount,\n    lastAdded,\n    setLastAdded\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n}\n_s(NotificationProvider, \"T/DuyLKyZ/twUQuaQxuJhY8rCfI=\");\n_c = NotificationProvider;\nexport const useNotifications = () => {\n  _s2();\n  const ctx = useContext(NotificationContext);\n  if (!ctx) throw new Error(\"useNotifications must be used within NotificationProvider\");\n  return ctx;\n};\n_s2(useNotifications, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useMemo","useRef","useState","jsxDEV","_jsxDEV","NotificationContext","STORAGE_KEY","NotificationProvider","children","_s","items","setItems","saved","localStorage","getItem","JSON","parse","lastAdded","setLastAdded","setItem","stringify","add","notif","_notif$title","_notif$message","_notif$type","_notif$source","_notif$ts","n","id","crypto","randomUUID","title","message","type","source","ts","Date","now","read","prev","markRead","map","markAllRead","remove","filter","unreadCount","length","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotifications","_s2","ctx","Error","$RefreshReg$"],"sources":["/Users/bagjimin/Desktop/aichatbot-project/frontend/src/context/NotificationContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useMemo, useRef, useState } from \"react\";\n\nconst NotificationContext = createContext(null);\n\nconst STORAGE_KEY = \"app.notifications.v1\";\n\nexport function NotificationProvider({ children }) {\n  const [items, setItems] = useState(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      return saved ? JSON.parse(saved) : [];\n    } catch {\n      return [];\n    }\n  });\n  const [lastAdded, setLastAdded] = useState(null); // 새 알림 팝업용\n\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(items));\n  }, [items]);\n\n  const add = (notif) => {\n    const n = {\n      id: crypto.randomUUID(),\n      title: notif.title ?? \"알림\",\n      message: notif.message ?? \"\",\n      type: notif.type ?? \"info\", // info | warning | critical\n      source: notif.source ?? \"system\",\n      ts: notif.ts ?? Date.now(),\n      read: false,\n    };\n    setItems((prev) => [n, ...prev]);\n    setLastAdded(n);\n  };\n\n  const markRead = (id) => {\n    setItems((prev) => prev.map((n) => (n.id === id ? { ...n, read: true } : n)));\n  };\n\n  const markAllRead = () => {\n    setItems((prev) => prev.map((n) => ({ ...n, read: true })));\n  };\n\n  const remove = (id) => {\n    setItems((prev) => prev.filter((n) => n.id !== id));\n  };\n\n  const unreadCount = useMemo(() => items.filter((n) => !n.read).length, [items]);\n\n  const value = { items, add, markRead, markAllRead, remove, unreadCount, lastAdded, setLastAdded };\n  return <NotificationContext.Provider value={value}>{children}</NotificationContext.Provider>;\n}\n\nexport const useNotifications = () => {\n  const ctx = useContext(NotificationContext);\n  if (!ctx) throw new Error(\"useNotifications must be used within NotificationProvider\");\n  return ctx;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/F,MAAMC,mBAAmB,gBAAGR,aAAa,CAAC,IAAI,CAAC;AAE/C,MAAMS,WAAW,GAAG,sBAAsB;AAE1C,OAAO,SAASC,oBAAoBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACvC,IAAI;MACF,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACR,WAAW,CAAC;MAC/C,OAAOM,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;IACvC,CAAC,CAAC,MAAM;MACN,OAAO,EAAE;IACX;EACF,CAAC,CAAC;EACF,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElDH,SAAS,CAAC,MAAM;IACdc,YAAY,CAACM,OAAO,CAACb,WAAW,EAAES,IAAI,CAACK,SAAS,CAACV,KAAK,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMW,GAAG,GAAIC,KAAK,IAAK;IAAA,IAAAC,YAAA,EAAAC,cAAA,EAAAC,WAAA,EAAAC,aAAA,EAAAC,SAAA;IACrB,MAAMC,CAAC,GAAG;MACRC,EAAE,EAAEC,MAAM,CAACC,UAAU,CAAC,CAAC;MACvBC,KAAK,GAAAT,YAAA,GAAED,KAAK,CAACU,KAAK,cAAAT,YAAA,cAAAA,YAAA,GAAI,IAAI;MAC1BU,OAAO,GAAAT,cAAA,GAAEF,KAAK,CAACW,OAAO,cAAAT,cAAA,cAAAA,cAAA,GAAI,EAAE;MAC5BU,IAAI,GAAAT,WAAA,GAAEH,KAAK,CAACY,IAAI,cAAAT,WAAA,cAAAA,WAAA,GAAI,MAAM;MAAE;MAC5BU,MAAM,GAAAT,aAAA,GAAEJ,KAAK,CAACa,MAAM,cAAAT,aAAA,cAAAA,aAAA,GAAI,QAAQ;MAChCU,EAAE,GAAAT,SAAA,GAAEL,KAAK,CAACc,EAAE,cAAAT,SAAA,cAAAA,SAAA,GAAIU,IAAI,CAACC,GAAG,CAAC,CAAC;MAC1BC,IAAI,EAAE;IACR,CAAC;IACD5B,QAAQ,CAAE6B,IAAI,IAAK,CAACZ,CAAC,EAAE,GAAGY,IAAI,CAAC,CAAC;IAChCtB,YAAY,CAACU,CAAC,CAAC;EACjB,CAAC;EAED,MAAMa,QAAQ,GAAIZ,EAAE,IAAK;IACvBlB,QAAQ,CAAE6B,IAAI,IAAKA,IAAI,CAACE,GAAG,CAAEd,CAAC,IAAMA,CAAC,CAACC,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGD,CAAC;MAAEW,IAAI,EAAE;IAAK,CAAC,GAAGX,CAAE,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBhC,QAAQ,CAAE6B,IAAI,IAAKA,IAAI,CAACE,GAAG,CAAEd,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEW,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;EAC7D,CAAC;EAED,MAAMK,MAAM,GAAIf,EAAE,IAAK;IACrBlB,QAAQ,CAAE6B,IAAI,IAAKA,IAAI,CAACK,MAAM,CAAEjB,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC;EACrD,CAAC;EAED,MAAMiB,WAAW,GAAG9C,OAAO,CAAC,MAAMU,KAAK,CAACmC,MAAM,CAAEjB,CAAC,IAAK,CAACA,CAAC,CAACW,IAAI,CAAC,CAACQ,MAAM,EAAE,CAACrC,KAAK,CAAC,CAAC;EAE/E,MAAMsC,KAAK,GAAG;IAAEtC,KAAK;IAAEW,GAAG;IAAEoB,QAAQ;IAAEE,WAAW;IAAEC,MAAM;IAAEE,WAAW;IAAE7B,SAAS;IAAEC;EAAa,CAAC;EACjG,oBAAOd,OAAA,CAACC,mBAAmB,CAAC4C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxC,QAAA,EAAEA;EAAQ;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA+B,CAAC;AAC9F;AAAC5C,EAAA,CA7CeF,oBAAoB;AAAA+C,EAAA,GAApB/C,oBAAoB;AA+CpC,OAAO,MAAMgD,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMC,GAAG,GAAG3D,UAAU,CAACO,mBAAmB,CAAC;EAC3C,IAAI,CAACoD,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,2DAA2D,CAAC;EACtF,OAAOD,GAAG;AACZ,CAAC;AAACD,GAAA,CAJWD,gBAAgB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}